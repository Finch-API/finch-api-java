// File generated from our OpenAPI spec by Stainless.

package com.tryfinch.api.models

import com.tryfinch.api.models.*
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SandboxPaymentCreateParamsTest {

    @Test
    fun createSandboxPaymentCreateParams() {
        SandboxPaymentCreateParams.builder()
            .endDate("string")
            .payStatements(
                listOf(
                    SandboxPaymentCreateParams.PayStatement.builder()
                        .earnings(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.Earning.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .hours(42.23)
                                    .name("string")
                                    .type(
                                        SandboxPaymentCreateParams.PayStatement.Earning.Type.SALARY
                                    )
                                    .build()
                            )
                        )
                        .employeeDeductions(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.EmployeeDeduction.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .name("string")
                                    .preTax(true)
                                    .type(BenefitType._401K)
                                    .build()
                            )
                        )
                        .employerContributions(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.EmployerContribution
                                    .builder()
                                    .amount(123L)
                                    .currency("string")
                                    .name("string")
                                    .type(BenefitType._401K)
                                    .build()
                            )
                        )
                        .grossPay(Money.builder().amount(123L).currency("string").build())
                        .individualId("string")
                        .netPay(Money.builder().amount(123L).currency("string").build())
                        .paymentMethod(SandboxPaymentCreateParams.PayStatement.PaymentMethod.CHECK)
                        .taxes(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.Tax.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .employer(true)
                                    .name("string")
                                    .type(SandboxPaymentCreateParams.PayStatement.Tax.Type.STATE)
                                    .build()
                            )
                        )
                        .totalHours(42.23)
                        .type(SandboxPaymentCreateParams.PayStatement.Type.REGULAR_PAYROLL)
                        .build()
                )
            )
            .startDate("string")
            .build()
    }

    @Test
    fun getBody() {
        val params =
            SandboxPaymentCreateParams.builder()
                .endDate("string")
                .payStatements(
                    listOf(
                        SandboxPaymentCreateParams.PayStatement.builder()
                            .earnings(
                                listOf(
                                    SandboxPaymentCreateParams.PayStatement.Earning.builder()
                                        .amount(123L)
                                        .currency("string")
                                        .hours(42.23)
                                        .name("string")
                                        .type(
                                            SandboxPaymentCreateParams.PayStatement.Earning.Type
                                                .SALARY
                                        )
                                        .build()
                                )
                            )
                            .employeeDeductions(
                                listOf(
                                    SandboxPaymentCreateParams.PayStatement.EmployeeDeduction
                                        .builder()
                                        .amount(123L)
                                        .currency("string")
                                        .name("string")
                                        .preTax(true)
                                        .type(BenefitType._401K)
                                        .build()
                                )
                            )
                            .employerContributions(
                                listOf(
                                    SandboxPaymentCreateParams.PayStatement.EmployerContribution
                                        .builder()
                                        .amount(123L)
                                        .currency("string")
                                        .name("string")
                                        .type(BenefitType._401K)
                                        .build()
                                )
                            )
                            .grossPay(Money.builder().amount(123L).currency("string").build())
                            .individualId("string")
                            .netPay(Money.builder().amount(123L).currency("string").build())
                            .paymentMethod(
                                SandboxPaymentCreateParams.PayStatement.PaymentMethod.CHECK
                            )
                            .taxes(
                                listOf(
                                    SandboxPaymentCreateParams.PayStatement.Tax.builder()
                                        .amount(123L)
                                        .currency("string")
                                        .employer(true)
                                        .name("string")
                                        .type(
                                            SandboxPaymentCreateParams.PayStatement.Tax.Type.STATE
                                        )
                                        .build()
                                )
                            )
                            .totalHours(42.23)
                            .type(SandboxPaymentCreateParams.PayStatement.Type.REGULAR_PAYROLL)
                            .build()
                    )
                )
                .startDate("string")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.endDate()).isEqualTo("string")
        assertThat(body.payStatements())
            .isEqualTo(
                listOf(
                    SandboxPaymentCreateParams.PayStatement.builder()
                        .earnings(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.Earning.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .hours(42.23)
                                    .name("string")
                                    .type(
                                        SandboxPaymentCreateParams.PayStatement.Earning.Type.SALARY
                                    )
                                    .build()
                            )
                        )
                        .employeeDeductions(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.EmployeeDeduction.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .name("string")
                                    .preTax(true)
                                    .type(BenefitType._401K)
                                    .build()
                            )
                        )
                        .employerContributions(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.EmployerContribution
                                    .builder()
                                    .amount(123L)
                                    .currency("string")
                                    .name("string")
                                    .type(BenefitType._401K)
                                    .build()
                            )
                        )
                        .grossPay(Money.builder().amount(123L).currency("string").build())
                        .individualId("string")
                        .netPay(Money.builder().amount(123L).currency("string").build())
                        .paymentMethod(SandboxPaymentCreateParams.PayStatement.PaymentMethod.CHECK)
                        .taxes(
                            listOf(
                                SandboxPaymentCreateParams.PayStatement.Tax.builder()
                                    .amount(123L)
                                    .currency("string")
                                    .employer(true)
                                    .name("string")
                                    .type(SandboxPaymentCreateParams.PayStatement.Tax.Type.STATE)
                                    .build()
                            )
                        )
                        .totalHours(42.23)
                        .type(SandboxPaymentCreateParams.PayStatement.Type.REGULAR_PAYROLL)
                        .build()
                )
            )
        assertThat(body.startDate()).isEqualTo("string")
    }

    @Test
    fun getBodyWithoutOptionalFields() {
        val params = SandboxPaymentCreateParams.builder().build()
        val body = params.getBody()
        assertThat(body).isNotNull
    }
}
