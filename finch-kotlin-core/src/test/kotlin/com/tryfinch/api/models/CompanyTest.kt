package com.tryfinch.api.models

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class CompanyTest {

    @Test
    fun createCompany() {
        val company =
            Company.builder()
                .id("string")
                .legalName("string")
                .entity(
                    Company.Entity.builder()
                        .type(Company.Entity.Type.LLC)
                        .subtype(Company.Entity.Subtype.S_CORPORATION)
                        .build()
                )
                .primaryEmail("string")
                .primaryPhoneNumber("string")
                .departments(
                    listOf(
                        Company.Department.builder()
                            .name("string")
                            .parent(Company.Department.Parent.builder().name("string").build())
                            .build()
                    )
                )
                .ein("string")
                .locations(
                    listOf(
                        Location.builder()
                            .line1("string")
                            .line2("string")
                            .city("string")
                            .state("string")
                            .postalCode("string")
                            .country("string")
                            .name("string")
                            .sourceId("string")
                            .build()
                    )
                )
                .accounts(
                    listOf(
                        Company.Account.builder()
                            .routingNumber("string")
                            .accountName("string")
                            .institutionName("string")
                            .accountType(Company.Account.AccountType.CHECKING)
                            .accountNumber("string")
                            .build()
                    )
                )
                .build()
        assertThat(company).isNotNull
        assertThat(company.id()).isEqualTo("string")
        assertThat(company.legalName()).isEqualTo("string")
        assertThat(company.entity())
            .isEqualTo(
                Company.Entity.builder()
                    .type(Company.Entity.Type.LLC)
                    .subtype(Company.Entity.Subtype.S_CORPORATION)
                    .build()
            )
        assertThat(company.primaryEmail()).isEqualTo("string")
        assertThat(company.primaryPhoneNumber()).isEqualTo("string")
        assertThat(company.departments())
            .containsExactly(
                Company.Department.builder()
                    .name("string")
                    .parent(Company.Department.Parent.builder().name("string").build())
                    .build()
            )
        assertThat(company.ein()).isEqualTo("string")
        assertThat(company.locations())
            .containsExactly(
                Location.builder()
                    .line1("string")
                    .line2("string")
                    .city("string")
                    .state("string")
                    .postalCode("string")
                    .country("string")
                    .name("string")
                    .sourceId("string")
                    .build()
            )
        assertThat(company.accounts())
            .containsExactly(
                Company.Account.builder()
                    .routingNumber("string")
                    .accountName("string")
                    .institutionName("string")
                    .accountType(Company.Account.AccountType.CHECKING)
                    .accountNumber("string")
                    .build()
            )
    }
}
